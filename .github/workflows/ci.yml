# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  push:
    branches: [ github-actions ]
  pull_request:
    branches: [ github-actions ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Check out the repository under $GITHUB_WORKSPACE
    - name: Clone Repo
      uses: actions/checkout@v2
      
    - name: Setup JDK
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 1.8
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1.39.0
      with:
        ruby-version: '2.6'
      
    - name: Decode google-services.json
      env:
        GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
      run: echo $GOOGLE_SERVICES > app/google-services.json

    - name: Cache Gems
      uses: actions/cache@v2.0.0
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: ${{ runner.os }}-gem-

    - name: Install Gems
      run: |
        bundle config path vendor/bundle
        bundle install

    - name: Increment Build Number
      run: ./gradlew incrementBuildNumber

    - name: Assemble Debug
      run: ./gradlew clean assembleDebug
    
    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest
      
    - name: Extract Version Number
      run: |
        # Get the latest build tools
        export BUILD_TOOLS=$($ANDROID_HOME/tools/bin/sdkmanager --list | grep "build-tools/" | awk '{ print $3 }' | tail -1)
        # Grab the version name from the generated APK
        export VERSION=$($ANDROID_HOME/build-tools/$BUILD_TOOLS/aapt dump badging app/build/outputs/apk/debug/app-debug.apk | grep versionName | awk '{print $4}' | grep -o [0-9].*[0-9])
        echo "::set-env name=version::$VERSION"
        echo "Version $VERSION"
    
    - name: Deploy Dev
      run: echo 'To Do Deploy Dev'
    
    - name: Commit Version Number
      run: echo "To Do Commit Version Number, version $version"
